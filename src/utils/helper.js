/**
 * 타입을 문자열로 가져오는 함수
 * @param {object} webPage brower.newpage() 를 선언한 변수
 * @param {number} typeCount 크롤링 데이터 셀렉터에 들어갈 숫자
 * @returns typeCount의 숫자가 들어간 셀렉터를 찾고, 개행문자 삭제, 카맬케이스로 변경 한 값을 반환
 */
const getType = async (webPage, typeCount) => {
  try {
    if (typeCount < 6) {
      const typeName = await webPage.$eval(
        `#contentdiv > table.stats > tbody > tr:nth-child(1) > th:nth-child(${typeCount})`,
        (el) => el.textContent
      );
      const typeNameStr = removeNewLine(typeName);
      const result = await toCamelCase(typeNameStr);
      console.log("파일이름", result);
      return result;
    } else {
      const typeName = await webPage.$eval(
        `#contentdiv > table.stats > tbody > tr:nth-child(1) > th:nth-child()`,
        (el) => el.textContent
      );
      const typeNameStr = removeNewLine(typeName);
      const result = await toCamelCase(typeNameStr);
      console.log("파일이름", result);
      return result;
    }
  } catch (e) {
    throw e;
  }
};

/**
 * 카맬케이스 변경 함수
 * @param {string} str 카맬케이스로 변환할 문자열
 * @returns 카맬케이스로 변환한 문자열을 반환
 */
const toCamelCase = (str) => {
  const result = str
    .toLowerCase()
    .replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
  return result;
};

/**
 * 개행문자 모두 제거 함수
 * @param {string} str 개행문자를 모두 제거할 문자열
 * @returns 개행문자를 모두 제거한 문자열을 반환
 */
const removeNewLine = (str) => {
  const result = str.replace(/\n|\r|\s*/g, "");
  return result;
};

const removeCommaWithNewLines = (str) => {
  const noo = str.replace(/,/g, "");
  const foo = noo.replace(/\n|\r/g, "");
  const too = foo.replace(/(^\s*)|(\s*$)/gi, "");
  return too;
};

const removePlus = (str) => {
  const too = str.replace(/\+/g, ".plus.");
  const uoo = too.replace(/\n|\r|\s*/g, "");
  return uoo;
};
exports.getType = getType;
exports.toCamelCase = toCamelCase;
exports.removeNewLine = removeNewLine;
exports.removeCommaWithNewLines = removeCommaWithNewLines;
exports.removePlus = removePlus;
