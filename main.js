const puppeteer = require("puppeteer");
const fs = require("fs");
const scrap = require("./src/utils/scrap");
const move = require("./src/utils/move");
const helper = require("./src/utils/helper");
const { PAGE, SELECTOR } = require("./src/constant/page");

const main = async () => {
  const browser = await puppeteer.launch({ headless: true });
  const webPage = await browser.newPage();

  //! 스크래핑 한 데이터를 담을 리스트
  let CVEList = [];

  //! 데이터 테이블 페이지의 현재페이지+1 (셀렉터의 값이 페이지+1 이라서 기본값이 1)
  let pageCount = 1;

  //! 타입 카운트 (셀렉터의 3번째 값부터 가져오기 위해서 기본값이 3)
  let typeCount = 3;

  //! 처음 메인페이지로 이동
  await webPage.goto(PAGE.MAIN);

  //! 파일 이름 추출
  let fileName = await helper.getType(webPage, typeCount);

  //! 첫번째 TPYE 페이지로 이동
  await webPage.click(SELECTOR.FRIST);

  //! 스크래핑 반복 험수
  const scraping = async () => {
    try {
      //! 스크래핑 함수
      await scrap.getData(webPage, CVEList, fileName);
      console.log("데이터 가져옴.");
    } catch (e) {
      //! 처음 메인페이지로 돌아가기
      await webPage.goto(PAGE.MAIN);
      console.log("메인페이지로 돌아옴");

      //! 현재 페이지 초기화
      pageCount = 0;
      console.log("페이지 초기화 : ", pageCount);

      //! TYPE카운트 + 1
      typeCount++;
      console.log("TYPE 카운트 +1 : ", typeCount);

      //! 파일 이름 추출
      try {
        fileName = await helper.getType(webPage, typeCount);
        console.log("파일이름 123 : ", fileName);
      } catch (e) {
        //! json으로 전환
        const content = JSON.stringify(CVEList);

        //! 스크래핑 데이터 파일 생성
        try {
          fs.writeFileSync(`./CVEJSONS/cve.json`, content);
          console.log("파일 저장됨");
          //! puppeteer 종료 함수
          browser.close();
          webPage.close();
        } catch (e) {
          console.error("파일 생성 오류", e);
        }
      }

      //! 페이지 이동 , +1페이지
      try {
        await move.toTypePage(webPage, typeCount);
      } catch (e) {
        //! puppeteer 종료 함수
        browser.close();
        webPage.close();
      }
    }

    //! 현재페이지 +1
    pageCount++;
    console.log("현재 페이지 +1 : ", pageCount);

    try {
      move.toNextPage(webPage, pageCount);
      setTimeout(() => {
        scraping();
      }, 2000);
    } catch (e) {
      console.error("nextPage함수에 문제 생겼어요", e);
      console.log("nextPage함수에 문제 생겼어요", e);
    }
  };

  scraping();
};

main();
