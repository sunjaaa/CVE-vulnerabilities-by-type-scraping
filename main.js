const puppeteer = require("puppeteer");
const fs = require("fs");
const crawler = require("./src/utils/crawler");
const move = require("./src/utils/move");
const helper = require("./src/utils/helper");
const { PAGE } = require("./src/constant/page");

const main = async () => {
  const browser = await puppeteer.launch({ headless: true });
  const webPage = await browser.newPage();

  //! 크롤링 한 데이터를 담을 리스트
  let CVEList = [];

  //! 데이터 테이블 페이지의 현재페이지+1 (셀렉터의 값이 페이지+1 이라서 기본값이 1)
  let pageCount = 1;

  //! 타입 카운트 (셀렉터의 3번째 값부터 가져오기 위해서 기본값이 3)
  let typeCount = 8;

  //! 처음 메인페이지로 이동
  await webPage.goto(PAGE.MAIN);

  //! 첫번째 TPYE 페이지로 이동
  await webPage.click(PAGE.FRIST);

  //! 크롤링 반복 험수
  const repeatCrawling = async () => {
    try {
      //! 크롤링 함수
      await crawler.getData(webPage, CVEList);
      console.log("데이터 가져옴.");
    } catch (e) {
      //! 처음 메인페이지로 돌아가기
      await webPage.goto(PAGE.MAIN);
      console.log("메인페이지로 돌아옴");

      //! 파일 이름 추출
      let fileName = await helper.getType(webPage, typeCount);
      console.log("파일이름 : ", fileName);

      //! json으로 전환
      const content = JSON.stringify(CVEList);

      //! 크롤링데이터 파일 생성
      try {
        fs.writeFileSync(`${fileName}.json`, content);
        console.log("파일 저장됨");
      } catch (e) {
        console.error("파일 생성 오류", e);
      }

      //! 현재 페이지 초기화
      pageCount = 0;
      console.log("페이지 초기화 : ", pageCount);
      //! CVE리스트 초기화
      CVEList = [];
      console.log("리스트 초기화 : ", CVEList);
      //! TYPE카운트 + 1
      typeCount++;
      console.log("TYPE 카운트 +1 : ", typeCount);
      //! 현재
      typeCount++;
      console.log("현재 TYPE 페이지 +1 : ", typeCount);

      //! 페이지 이동 , +1페이지
      try {
        await move.toTypePage(webPage, typeCount);
      } catch (e) {
        //! 반복 종료
        crawler.stopInterval(intervalID);

        //! puppeteer 종료 함수
        browser.close();
        webPage.close();
      }
    }

    //! 현재페이지 +1
    pageCount++;
    console.log("현재 페이지 +1 : ", pageCount);

    try {
      move.toNextPage(webPage, pageCount);
    } catch (e) {
      console.error("nextPage함수에 문제 생겼어요", e);
      console.log("nextPage함수에 문제 생겼어요", e);
    }
  };

  //! 10초마다 크롤링 함수를 반복 (intervalID 는 clearInterval에 필요한 id를 반환)
  const intervalID = setInterval(repeatCrawling, 10000);
};

main();
